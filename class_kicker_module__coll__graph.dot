digraph "KickerModule"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node2 [label="{KickerModule\n|+ kFrequency\l+ kPeriod\l+ kPriority\l- prevKickTime\l- nCs\l|+ KickerModule()\l+ start()\l+ entry()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{GenericModule\n|+ period\l+ name\l+ priority\l+ stackSize\l+ handle\l|+ GenericModule()\l+ start()\l+ entry()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_generic_module.html",tooltip="Interface for all modules, so that they can be ran by the scheduler. "];
  Node4 -> Node2 [color="grey25",fontsize="10",style="solid",label=" -kicker" ,arrowhead="odiamond",fontname="Helvetica"];
  Node4 [label="{KickerBoard\n|- verbose\l- isChargedCutoff\l- _ball_sensed\l- _is_healthy\l- _current_voltage\l- _is_kick\l- _kick_immediate\l- _kick_breakbeam\l- _cancel_kick\l- _charge_allowed\l- _kick_strength\l|+ KickerBoard()\l+ flash()\l+ flash()\l+ kickType()\l+ kick()\l+ kickOnBreakbeam()\l+ cancelBreakbeam()\l+ isBallSensed()\l+ getVoltage()\l+ isCharged()\l+ setChargeAllowed()\l+ isHealthy()\l+ service()\l# verify_param()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_kicker_board.html",tooltip="A class for interfacing with the kicker board, which is based on an AVR chip. "];
  Node5 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node5 [label="{AVR910\n|# nCs_\l# nReset_\l|+ AVR910()\l+ init()\l+ program()\l+ program()\l+ readVendorCode()\l+ readPartFamilyAndFlashSize()\l+ readPartNumber()\l# writeFuseBitsLow()\l# readRegister()\l# checkMemory()\l# checkMemory()\l# exitProgramming()\l# lock_spi()\l- enableProgramming()\l- poll()\l- chipErase()\l- loadMemoryPage()\l- writeFlashMemoryByte()\l- writeFlashMemoryPage()\l- readProgramMemory()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_a_v_r910.html",tooltip="AVR910 ISP. "];
  Node6 -> Node5 [color="grey25",fontsize="10",style="solid",label=" #spi_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node6 [label="{LockedStruct\< SPI \>\n|- value\l- mutex_depth\l- mutex\l|+ LockedStruct()\l+ LockedStruct()\l+ LockedStruct()\l+ operator=()\l+ operator=()\l+ ~LockedStruct()\l+ lock()\l+ unsafe_value()\l- acquire_mutex()\l- release_mutex()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$struct_locked_struct.html"];
  Node7 -> Node6 [dir="back",color="orange",fontsize="10",style="solid",label=" \< SPI \>" ,fontname="Helvetica"];
  Node7 [label="{LockedStruct\< T \>\n|- mutex_depth\l- mutex\l|+ LockedStruct()\l+ LockedStruct()\l+ operator=()\l+ LockedStruct()\l+ operator=()\l+ ~LockedStruct()\l+ lock()\l+ unsafe_value()\l- acquire_mutex()\l- release_mutex()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$struct_locked_struct.html",tooltip="A locked-struct abstraction. "];
  Node8 -> Node7 [color="grey25",fontsize="10",style="solid",label=" -value" ,arrowhead="odiamond",fontname="Helvetica"];
  Node8 [label="{T\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node9 -> Node2 [color="grey25",fontsize="10",style="solid",label=" -kickerInfo" ,arrowhead="odiamond",fontname="Helvetica"];
  Node9 [label="{LockedStruct\< KickerInfo \>\n|- mutex_depth\l- mutex\l|+ LockedStruct()\l+ LockedStruct()\l+ LockedStruct()\l+ operator=()\l+ operator=()\l+ ~LockedStruct()\l+ lock()\l+ unsafe_value()\l- acquire_mutex()\l- release_mutex()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$struct_locked_struct.html"];
  Node10 -> Node9 [color="grey25",fontsize="10",style="solid",label=" -value" ,arrowhead="odiamond",fontname="Helvetica"];
  Node10 [label="{KickerInfo\n|+ isValid\l+ initialized\l+ lastUpdate\l+ kickerHasError\l+ kickerCharged\l+ ballSenseTriggered\l|}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$struct_kicker_info.html",tooltip="Contains status on kicker and breakbeam. "];
  Node7 -> Node9 [dir="back",color="orange",fontsize="10",style="solid",label=" \< KickerInfo \>" ,fontname="Helvetica"];
  Node11 -> Node2 [color="grey25",fontsize="10",style="solid",label=" -kickerCommand" ,arrowhead="odiamond",fontname="Helvetica"];
  Node11 [label="{LockedStruct\< KickerCommand \>\n|- mutex_depth\l- mutex\l|+ LockedStruct()\l+ LockedStruct()\l+ LockedStruct()\l+ operator=()\l+ operator=()\l+ ~LockedStruct()\l+ lock()\l+ unsafe_value()\l- acquire_mutex()\l- release_mutex()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$struct_locked_struct.html"];
  Node12 -> Node11 [color="grey25",fontsize="10",style="solid",label=" -value" ,arrowhead="odiamond",fontname="Helvetica"];
  Node12 [label="{KickerCommand\n|+ isValid\l+ lastUpdate\l+ shootMode\l+ triggerMode\l+ kickStrength\l|}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$struct_kicker_command.html",tooltip="Contains data on whether to kick, chip, kick on breakbeam etc Contains data on whether to kick or chi..."];
  Node7 -> Node11 [dir="back",color="orange",fontsize="10",style="solid",label=" \< KickerCommand \>" ,fontname="Helvetica"];
}
