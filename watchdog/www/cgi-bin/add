#!/usr/bin/python

from watchdog import *

def send_form(message = ""):
    header()

    # Build variables for filling in the template
    options = ""
    for h in hosts:
        options += "    <option value=\"" + h + "\""
        if h == host:
            options += " selected"
        options += ">" + h + "</option>\n"

    if enabled == "on":
        enabled_checked = "checked"
    else:
        enabled_checked = ""
        
    if auto_display == "on":
        auto_display_checked = "checked"
    else:
        auto_display_checked = ""

    props = {
        "stylesheet":   stylesheet,
        "options":      options,
        "message":      message,
        "name":         name,
        "cwd":          cwd,
        "command":      command,
        "enabled":      enabled_checked,
        "delay":        delay,
        "max_restarts": max_restarts,
        "auto_display": auto_display_checked,
        "display":      display,
        "ret":          get_param('ret', 'status')
    }

    template = open("add.template")
    for line in template:
        print line % props


host = none_to_blank(form.getvalue("host"))
name = none_to_blank(form.getvalue("name"))
cwd = none_to_blank(form.getvalue("cwd"))
command = none_to_blank(form.getvalue("command"))
enabled = none_to_blank(form.getvalue("enabled"))
delay = none_to_blank(form.getvalue("delay"))
max_restarts = none_to_blank(form.getvalue("max_restarts"))
auto_display = none_to_blank(form.getvalue("auto_display"))
display = none_to_blank(form.getvalue("display"))

ename = escape(name)

if host == "" or name == "":
    send_form()
else:
    try:
        # Add a process
        wd = watchdog(host)

        if command == "":
            raise RuntimeError, "No command given"

        wd.command("add " + ename)
        if cwd != "":
            wd.command("cwd " + ename + " " + escape(cwd))

        wd.command("command " + ename + " " + command)

        if enabled == "on":
            wd.command("enable " + ename)

        if delay != "":
            wd.command("delay " + ename + " " + delay)

        if max_restarts != "":
            wd.command("max_restarts " + ename + " " + max_restarts)
        
        if auto_display == "on":
            wd.command("auto_display " + ename + " 1")
        else:
            wd.command("auto_display " + ename + " 0")

        if display != "":
            wd.command("display " + ename + " " + display)

        print 'Location: ' + get_param('ret', 'status')
        print ''
    except RuntimeError, e:
           send_form("<span class=\"error\">" + e.args[0] + "</span>")
