#!/usr/bin/python

import datetime
from watchdog import *
from process_status import *

# Gets and writes out process status for the given host
def write_status(host):
    # Host header
    print '<div class="status">'
    print '<div class="header">'
    print '<span class="title">' + host + ':</span>'

    if type(host_status[host]) != type(()):
        # Error getting status
        print '<div class="error">Failed to get process status: ', host_status[host], '</div></div></div>'
        return
    
    (status, machine_status) = host_status[host]
    
    # Temperatures
    if 'temp' in machine_status:
        for (loc, temp) in make_list(machine_status['temp']):
            temp = float(temp)
            loc = loc.replace('_', ' ')
            
            if temp >= 70:
                temp_class = 'temp-hot'
            elif temp >= 50:
                temp_class = 'temp-warm'
            else:
                temp_class = 'temp-ok'
            print '<span class="' + temp_class + '">' + loc + ': ' + repr(temp) + '&deg;C</span>'

    # Network status
    space = ' style="margin-left: 5%"'
    if 'net' in machine_status:
        for (dev, rx_bytes, tx_bytes, rx_rate, tx_rate) in make_list(machine_status['net']):
            rx_rate = '%.0f' % (float(rx_rate) / 1024);
            tx_rate = '%.0f' % (float(tx_rate) / 1024);
            print '<span class=net' + space + '>' + dev + ': RX ' + rx_rate + ' kB/s&nbsp;&nbsp;TX ' + tx_rate + ' kB/s</span>'
            space = ''
    
    print '</div>'

    # Network status (as a table)
#    print '<table class="status">'
#    print '<tr><th>Interface</th><th>RX</th><th>TX</th></tr>'
#    if 'net' in machine_status:
#        for (dev, rx_bytes, tx_bytes, rx_rate, tx_rate) in make_list(machine_status['net']):
#            rx_rate = '%.0f kB/s' % (float(rx_rate) / 1024);
#            tx_rate = '%.0f kB/s' % (float(tx_rate) / 1024);
#            print '<tr><td>' + dev + '</td><td>' + rx_rate + '</td><td>' + tx_rate + '</td></tr>'
#    print '</table>'

    # Process status
    print '<table class="status">'
    print '<tr><th>Name</th><th colspan=2>Running</th><th>Enabled</th><th>Restarts</th><th>CPU</th><th>Memory</th><th>PID</th>'
    print '<th colspan=5 class="control">Control</th></tr>'

    dark = False
    for name in status.keys():
        props = status[name]
        if dark:
            print '<tr class="dark">'
        else:
            print '<tr>'
        dark = not dark

        write_process_status(host, name, props)

        print '</tr>'

    if 'cpu_usage' in machine_status:
        total_cpu = '%.1f%%' % float(machine_status['cpu_usage'])
    else:
        total_cpu = ''
    
    if 'mem_usage' in machine_status:
        total_memory = '%.1f%%' % float(machine_status['mem_usage'])
    else:
        total_memory = ''
    
    print '<tr class="total"><th colspan=5>Total:</th><td>' + total_cpu + '</td><td>' + total_memory + '</td><td colspan=6></td></tr>'
    print '</table>'
    
    # Host commands
    print '<div class="host_commands">'
    print make_link('Add Process', 'add', {'host':host})
    print make_link('Start Enabled Processes', 'start_enabled', {'host':host})
    print make_link('Stop All', 'stop_all', {'host':host})
    print make_link('Reload Config', 'command', {'host':host, 'cmd':'reload'})
    print make_link('Shutdown Watchdog', 'command', {'host':host, 'cmd':'shutdown'})
    print make_link('Restart Watchdog', 'command', {'host':host, 'cmd':'restart'})
    print '<a href="http://' + host + '/log/latest">Log</a>'
    print '</div>'
    
    # Close host paragraph
    print '</div>'

host = get_param('host')
if host == 'all':
    host = ''

# Add the selected host to the list of hosts if it is not already present
if host != '' and host not in hosts:
    hosts.append(host)

host_status = get_all_status()

# Header
header()
print '<html>'
print '<head><title>Status'
if host != '':
    print ' of ' + host
print '</title>'
print '<link rel=stylesheet href="' + stylesheet + '"/>'

write_refresh_header()
    
# Cookies
print '<meta http-equiv="Set-Cookie" content="host=' + host + '"/>'

print '</head>'
print '<body>'

# Date and time
dt = datetime.datetime.now()
print '<div class="time">' + dt.ctime() + '</div>'

# Refresh combobox
write_refresh_combo('status')

# Host selection
write_host_list(host_status)

print '<div class="host_commands">'
print make_link('Groups', 'groups')
print make_link('Stop All', 'stop_all', None, None)
print '</div>'

# Host status
if host == '':
    # Show all hosts
    for host in hosts:
        write_status(host)
else:
    # Show only specified host
    write_status(host)

print '</body></html>'
