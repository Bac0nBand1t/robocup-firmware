// kate: indent-mode cstyle; indent-width 4; tab-width 4; space-indent false;
// vim:ai ts=4 et

#include "Processor.hpp"
#include <Processor.moc>

#include <QMutexLocker>

#include <Network/Network.hpp>
#include <Network/Sender.hpp>
#include <Network/PacketReceiver.hpp>

#include <Point.hpp>
#include <Vision.hpp>
#include <Constants.hpp>
#include <Utils.hpp>

#include <modeling/WorldModel.hpp>
#include <log/LogModule.hpp>
#include <gameplay/GameplayModule.hpp>

#include <boost/foreach.hpp>
#include <boost/make_shared.hpp>

// Headers generated by protoc
#include <vision/messages_robocup_ssl_detection.pb.h>
#include <vision/messages_robocup_ssl_wrapper.pb.h>
#include <vision/messages_robocup_ssl_geometry.pb.h>

using namespace std;
using namespace boost;

Processor::Processor(Team t, QString filename) :
	_running(true),
	_team(t),
	_sender(Network::Address, Network::addTeamOffset(_team, Network::RadioTx)),
	_config(filename)
{
	_reverseId = 0;
	
	Geometry2d::Point trans;
	if (_team == Blue)
	{
		_teamAngle = -90;
		trans = Geometry2d::Point(0, Constants::Field::Length / 2.0f);
	} else {
		// Assume yellow
		_teamAngle = 90;
		trans = Geometry2d::Point(0, Constants::Field::Length / 2.0f);
	}

	//transformations from world to team space
	_teamTrans = Geometry2d::TransformMatrix::translate(trans);
	_teamTrans *= Geometry2d::TransformMatrix::rotate(_teamAngle);

	_flipField = false;

	//set the team
	_state.team = _team;

	//initially no camera does the triggering
	_triggerId = -1;
	_trigger = false;

	//runs independently of main loop
	_inputHandler = make_shared<InputHandler>(this);
	_inputHandler->setObjectName("input");
	_inputHandler->start();

	//default to auto, running when no input device
	if (!_inputHandler->enabled())
	{
		printf("No controller: Auto/Running\n");
		_state.controlState = SystemState::Auto;
		_state.runState = SystemState::Running;
	}

	QMetaObject::connectSlotsByName(this);

	try
	{
		_config.load();
	}
	catch (std::runtime_error& re)
	{
		printf("Config Load Error: %s\n", re.what());
	}

	//setup the modules
	_modelingModule = make_shared<Modeling::WorldModel>(&_state, _config.worldModel);
	_stateIDModule = make_shared<StateIdentification::StateIDModule>(&_state);
	_motionModule = make_shared<Motion::MotionModule>(&_state, _config.motionModule);
	_refereeModule = make_shared<RefereeModule>(&_state);
	_gameplayModule = make_shared<Gameplay::GameplayModule>(&_state, _config.motionModule);
	_logModule = make_shared<Log::LogModule>(&_state);

	_modules.append(_modelingModule);
	_modules.append(_refereeModule);
	_modules.append(_stateIDModule);
	_modules.append(_gameplayModule);
	_modules.append(_motionModule);
	_modules.append(_logModule);
}

Processor::~Processor()
{
	_running = false;
	wait();
}

void Processor::setLogFile(Log::LogFile* lf)
{
	_logModule->setLogFile(lf);
}

void Processor::run()
{
	//setup receiver of packets for vision and radio
	Network::PacketReceiver receiver;
	receiver.addType("224.5.23.2", 10002, this,
			&Processor::visionHandler);
	receiver.addType(Network::Address,
			Network::addTeamOffset(_team, Network::RadioRx),
			this, &Processor::radioHandler);
	RefereeModule* raw = dynamic_cast<RefereeModule*>(_refereeModule.get());
	receiver.addType(RefereeAddress, RefereePort, 
			raw, &RefereeModule::packet);

	while (_running)
	{
		if (_state.runState == SystemState::Running)
		{
			if (_state.controlState == SystemState::Manual)
			{
				//non blocking information for manual control
				receiver.receive(false);

				//run modeling for testing
				_modelingModule->run();
				_refereeModule->run();

				// Clear radio commands and get shell numbers from world model
				for (int r = 0; r < Constants::Robots_Per_Team; ++r)
				{
					_state.self[r].radioTx = Packet::RadioTx::Robot();
					_state.self[r].radioTx.board_id = _state.self[r].shell;
				}

				if (_state.manualID >= 0)
				{
					_inputHandler->genRobotData(_state.self[_state.manualID].radioTx);
				}

				_logModule->run();

				//send out the radio data from manual control
				sendRadioData();

				clearState();

				//constant time wait for radio consistency
				QThread::msleep(35);
			}
			else if (_state.controlState == SystemState::Auto)
			{
				//blocking to act on new packets
				receiver.receive(true);

				//if vision told us to act
				if (_trigger)
				{
					// Clear radio commands
					for (int r = 0; r < 5; ++r)
					{
						_state.self[r].radioTx = Packet::RadioTx::Robot();
					}

					if (_modelingModule)
					{
						_modelingModule->run();
					}
					
					for (int r = 0; r < 5; ++r)
					{
						if (_state.self[r].valid)
						{
							ConfigFile::Robot* rcfg = _config.robot(_state.self[r].shell);
							
							if (rcfg)
							{
								_state.self[r].config = *rcfg;
							}
						}
					}
					
					if (_refereeModule)
					{
						_refereeModule->run();
					}
					
					if (_stateIDModule)
					{
						_stateIDModule->run();
					}

					if (_gameplayModule)
					{
						_gameplayModule->run();
					}

					if (_motionModule)
					{
						_motionModule->run();
					}

					//always run logging last
					_logModule->run();
					
					// Send motion commands to the robots
					sendRadioData();

					//new state
					clearState();

					//wait for new trigger frame
					_trigger = false;
				}
			}
		}
		else
		{
			//blocking to act on new packets
			receiver.receive(false);

			//run modeling for testing
			_modelingModule->run();
			_refereeModule->run();

			_logModule->run();

			clearState();

			//fixed wait
			QThread::msleep(35);
		}
	}
}

void Processor::clearState()
{
	//always clear the raw vision packets
// 	_state.rawVision.clear();
}

void Processor::sendRadioData()
{
	Packet::RadioTx tx;

	tx.reverse_board_id = _state.self[_reverseId].shell;
	_reverseId = (_reverseId + 1) % Constants::Robots_Per_Team;
	
	for (int i = 0; i < 5; ++i)
	{
		tx.robots[i] = _state.self[i].radioTx;
	}

	bool halt;
	if (_state.controlState == SystemState::Manual)
	{
		// Manual
		halt = (_state.runState != SystemState::Running);
	} else {
		// Auto
		halt = _state.gameState.halt();
	}

	if (halt)
	{
		// Force all motor speeds to zero
		for (int r = 0; r < 5; ++r)
		{
			for (int m = 0; m < 4; ++m)
			{
				tx.robots[r].motors[m] = 0;
			}
		}
	}

	_sender.send(tx);
}

void Processor::visionHandler(const std::vector<uint8_t>* buf)
{
	SSL_WrapperPacket wrapper;
	if (!wrapper.ParseFromArray(&buf->at(0), buf->size()))
	{
		printf("Bad vision packet\n");
		return;
	}
	
	if (!wrapper.has_detection())
	{
		// Geometry only - we don't care
		return;
	}
	
	const SSL_DetectionFrame &detection = wrapper.detection();
	
	Packet::Vision visionPacket;
	visionPacket.camera = detection.camera_id();
	visionPacket.timestamp = (uint64_t)(detection.t_capture() * 1.0e6);
	
	BOOST_FOREACH(const SSL_DetectionRobot& robot, detection.robots_yellow())
	{
		if (robot.confidence() == 0)
		{
			continue;
		}
		
		Packet::Vision::Robot r;
		r.pos.x = robot.x()/1000.0;
		r.pos.y = robot.y()/1000.0;
		r.angle = robot.orientation() * RadiansToDegrees;
		r.shell = robot.robot_id();
		
		visionPacket.yellow.push_back(r);
	}
	
	BOOST_FOREACH(const SSL_DetectionRobot& robot, detection.robots_blue())
	{
		if (robot.confidence() == 0)
		{
			continue;
		}
		
		Packet::Vision::Robot r;
		r.pos.x = robot.x()/1000.0;
		r.pos.y = robot.y()/1000.0;
		r.angle = robot.orientation() * RadiansToDegrees;
		r.shell = robot.robot_id();
		
		visionPacket.blue.push_back(r);
	}
	
	BOOST_FOREACH(const SSL_DetectionBall& ball, detection.balls())
	{
		if (ball.confidence() == 0)
		{
			continue;
		}
		
		Packet::Vision::Ball b;
		b.pos.x = ball.x()/1000.0;
		b.pos.y = ball.y()/1000.0;
		visionPacket.balls.push_back(b);
	}

	//populate the state
	if (visionPacket.camera >= _state.rawVision.size())
	{
		_state.rawVision.resize(visionPacket.camera + 1);
	}
	_state.rawVision[visionPacket.camera] = visionPacket;

	//convert last frame to teamspace
	toTeamSpace(_state.rawVision[visionPacket.camera]);

	if (visionPacket.camera == 0)
	{
		_state.timestamp = visionPacket.timestamp;
		_trigger = true;
	}
}

void Processor::radioHandler(const Packet::RadioRx* packet)
{
	//received radio packets
	for (unsigned int i=0 ; i<5 ; ++i)
	{
		if (_state.self[i].shell == packet->board_id)
		{
			_state.self[i].radioRx = *packet;
			break;
		}
	}
}

void Processor::toTeamSpace(Packet::Vision& vision)
{
	//translates raw vision into team space
	//means modeling doesn't need to do it
	for (unsigned int i = 0; i < vision.blue.size(); ++i)
	{
		Packet::Vision::Robot& r = vision.blue[i];

		if (_flipField)
		{
			r.pos *= -1;
			r.angle = Utils::fixAngleDegrees(r.angle + 180);
		}

		r.pos = _teamTrans * r.pos;
		r.angle = Utils::fixAngleDegrees(_teamAngle + r.angle);
	}

	for (unsigned int i = 0; i < vision.yellow.size(); ++i)
	{
		Packet::Vision::Robot& r = vision.yellow[i];

		if (_flipField)
		{
			r.pos *= -1;
			r.angle = Utils::fixAngleDegrees(r.angle + 180);
		}

		r.pos = _teamTrans * r.pos;
		r.angle = Utils::fixAngleDegrees(_teamAngle + r.angle);
	}

	for (unsigned int i = 0; i < vision.balls.size(); ++i)
	{
		Packet::Vision::Ball& b = vision.balls[i];

		if (_flipField)
		{
			b.pos *= -1;
		}

		b.pos = _teamTrans * b.pos;
	}
}

/// slots ///
void Processor::on_input_playPauseButton()
{
	switch (_state.runState)
	{
		case SystemState::Stopped:
			_state.runState = SystemState::Running;
			printf("Running\n");
			break;
		case SystemState::Running:
		default:
			_state.runState = SystemState::Stopped;
			printf("Stopped\n");
			break;
	}
}

void Processor::on_input_manualAutoButton()
{
	switch (_state.controlState)
	{
		case SystemState::Manual:
			_state.controlState = SystemState::Auto;
			printf ("Auto mode\n");
			break;
		case SystemState::Auto:
		default:
			_state.controlState = SystemState::Manual;
			printf ("Manual mode\n");
			break;
	}
}

void Processor::on_input_selectRobot(int rid)
{
	_state.manualID = rid;
	printf ("Controlling robot: %d\n", _state.manualID);
}

void Processor::flip_field(bool flip)
{
	_flipField = flip;
}
