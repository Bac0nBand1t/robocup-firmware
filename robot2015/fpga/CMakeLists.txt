
# look for installed Xilinx tools in /opt/Xilinx
message(STATUS "Searching for Xilinx tools in /opt/Xilinx")
file(GLOB XILINX_VERSION_DIRS
    /opt/Xilinx/*
)
set(XILINX_VERSION_DIRS ${XILINX_VERSION_DIRS}) # convert XILINX_VERSION_DIRS from a string to a list


# log a warning if no Xilinx versions could be found, otherwise set the directory to the tools
list(LENGTH XILINX_VERSION_DIRS AVAILABLE_XILINX_VERSIONS_COUNT)
if(AVAILABLE_XILINX_VERSIONS_COUNT EQUAL 0)
    message(WARNING "Unable to find Xilinx tools.  Install the ISE WebPack to /opt/Xilinx to synthesize Verilog for the fpga")
else()
    # sort the available versions and take the last one (the highest version)
    list(SORT XILINX_VERSION_DIRS)
    list(GET XILINX_VERSION_DIRS -1 XILINX_VERSION_DIR)
    set(XILINX_TOOLS_DIR "${XILINX_VERSION_DIR}/ISE_DS/ISE/bin/lin64")

    message(STATUS "Found Xilinx tools at ${XILINX_TOOLS_DIR}")
endif()


add_custom_target(copy_ucf
    ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_CURRENT_SOURCE_DIR}/robocup.ucf ${CMAKE_CURRENT_BINARY_DIR}
    COMMENT "Copying ucf file to xflow working directory")

# target for synthesizing the Verilog to a bitstream file that can be used to configure the fpga
add_custom_target(fpga2015bit
    ${XILINX_TOOLS_DIR}/xflow
        -wd ${CMAKE_CURRENT_BINARY_DIR}
        -p xc3s100etq144-4
        -synth xst_verilog
        -implement fast_runtime
        -config bitgen ${CMAKE_CURRENT_SOURCE_DIR}/robocup.v
    COMMENT "Using xflow to generate fpga bitstream from Verilog files"
    DEPENDS copy_ucf)

# The bitstream file contains extra header information that we don't need when configuring the fpga, so we convert to the binary format
# which can be used for configuration directly.
# The -b flag instructs promgen to swap the bit order, which is required for slave serial mode.  See this forum post for more info:
# http://dbaspot.com/arch/340642-spartan3e-slave-serial-daisy-chain-print.html
add_custom_target(fpga2015bin
    ${XILINX_TOOLS_DIR}/promgen
        -w -b -p bin -u 0 ${CMAKE_CURRENT_BINARY_DIR}/robocup.bit -o ${CMAKE_CURRENT_BINARY_DIR}/robocup.bin
    DEPENDS fpga2015bit
    COMMENT "Creating bin file from bitstream"
)

# MBED tries to load the most recent .bin file as its main program, so we can't name our fpga file with a .bin extension
add_custom_target(fpga2015nib
    cp ${CMAKE_CURRENT_BINARY_DIR}/robocup.bin ${CMAKE_CURRENT_BINARY_DIR}/robocup.nib
    COMMENT "Copying .bin to .nib b/c .bin is a reserved extension on MBED"
    DEPENDS fpga2015bin
)

# target to copy the output fpga bitstream to the mbed
add_custom_target(fpga2015-prog
    COMMAND ${PROJECT_SOURCE_DIR}/util/mbed-copy.sh ${CMAKE_CURRENT_BINARY_DIR}/robocup.nib
    DEPENDS fpga2015nib
    COMMENT "Copies the fpga bitstream file to the mbed"
)

# Write git_version.vh into the build dir containing the first 8 characters of
# the current git hash and a boolean for whether or not the repo is "dirty"
execute_process(
    COMMAND ${GIT_EXECUTABLE} rev-parse HEAD
    OUTPUT_VARIABLE GIT_HASH
    OUTPUT_STRIP_TRAILING_WHITESPACE
)
string(SUBSTRING ${GIT_HASH} 0 8 GIT_HASH_8)
execute_process(
    COMMAND ${GIT_EXECUTABLE} diff --quiet
    RESULT_VARIABLE GIT_DIRTY
)
file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/git_version.vh
    "// Git version information - auto-generated by CMake at synthesis time\n"
    "`define GIT_VERSION_HASH 8'h${GIT_HASH_8}\n"
    "`define GIT_VERSION_DIRTY 1'b${GIT_DIRTY}\n"
)
