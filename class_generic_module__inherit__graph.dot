digraph "GenericModule"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node0 [label="{GenericModule\n|+ period\l+ name\l+ priority\l+ stackSize\l+ handle\l|+ GenericModule()\l+ start()\l+ entry()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node0 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node1 [label="{BatteryModule\n|+ kFrequency\l+ kPeriod\l+ kPriority\l- batteryVoltage\l- battery\l|+ BatteryModule()\l+ entry()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_battery_module.html",tooltip="Module interfacing with battery and handling battery status. "];
  Node0 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{FPGAModule\n|+ kFrequency\l+ kPeriod\l+ kPriority\l- motorCommand\l- motorFeedback\l- fpgaStatus\l- fpga\l- fpgaInitialized\l- COMMAND_TIMEOUT\l- GEAR_RATIO\l- ENC_TICK_PER_REV\l|+ FPGAModule()\l+ start()\l+ entry()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_f_p_g_a_module.html",tooltip="Module interfacing with FPGA and handling FPGA status. "];
  Node0 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{IMUModule\n|+ kFrequency\l+ kPeriod\l+ kPriority\l- imu\l- imuData\l|+ IMUModule()\l+ start()\l+ entry()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_i_m_u_module.html",tooltip="Module interfacing with IMU and handling IMU status. "];
  Node0 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node4 [label="{KickerModule\n|+ kFrequency\l+ kPeriod\l+ kPriority\l- kickerCommand\l- kickerInfo\l- prevKickTime\l- nCs\l- kicker\l|+ KickerModule()\l+ start()\l+ entry()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_kicker_module.html",tooltip="Module interfacing with Kicker and handling Kicker status. "];
  Node0 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node5 [label="{LEDModule\n|+ kFrequency\l+ kPeriod\l+ kPriority\l- ioExpander\l- dotStarSPI\l- batteryVoltage\l- fpgaStatus\l- kickerInfo\l- radioError\l- dotStarNCS\l- leds\l- missedSuperLoopToggle\l- missedModuleRunToggle\l- IOExpanderErrorLEDMask\l|+ LEDModule()\l+ start()\l+ entry()\l+ fpgaInitialized()\l+ radioInitialized()\l+ kickerInitialized()\l+ fullyInitialized()\l+ missedSuperLoop()\l+ missedModuleRun()\l- setColor()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_l_e_d_module.html",tooltip="Module interfacing with debugging LEDS based on the statuses of other electronics. "];
  Node0 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node6 [label="{MotionControlModule\n|+ kFrequency\l+ kPeriod\l+ kPriority\l- batteryVoltage\l- imuData\l- motionCommand\l- motorFeedback\l- motorCommand\l- dribblerController\l- robotController\l- robotEstimator\l- prevCommand\l- COMMAND_TIMEOUT\l|+ MotionControlModule()\l+ entry()\l- isRecentUpdate()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_motion_control_module.html",tooltip="Module handling robot state estimation and motion control for motors. "];
  Node0 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node7 [label="{RadioModule\n|+ kFrequency\l+ kPeriod\l+ kPriority\l- batteryVoltage\l- fpgaStatus\l- kickerInfo\l- robotID\l- kickerCommand\l- motionCommand\l- radioError\l- link\l- secondRadioCS\l|+ RadioModule()\l+ start()\l+ entry()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_radio_module.html",tooltip="Module interfacing with Radio and handling Radio status. "];
  Node0 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node8 [label="{RotaryDialModule\n|+ kFrequency\l+ kPriority\l- robotID\l- dial\l- last_robot_id\l|+ RotaryDialModule()\l+ start()\l+ entry()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_rotary_dial_module.html",tooltip="Module interfacing with Rotary Dial to handle Robot IDs. "];
}
