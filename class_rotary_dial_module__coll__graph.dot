digraph "RotaryDialModule"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node2 [label="{RotaryDialModule\n|+ kFrequency\l+ kPeriod\l+ kPriority\l- last_robot_id\l|+ RotaryDialModule()\l+ start()\l+ entry()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{GenericModule\n|+ period\l+ name\l+ priority\l+ stackSize\l+ handle\l|+ GenericModule()\l+ start()\l+ entry()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_generic_module.html",tooltip="Interface for all modules, so that they can be ran by the scheduler. "];
  Node4 -> Node2 [color="grey25",fontsize="10",style="solid",label=" -robotID" ,arrowhead="odiamond",fontname="Helvetica"];
  Node4 [label="{LockedStruct\< RobotID \>\n|- mutex_depth\l- mutex\l|+ LockedStruct()\l+ LockedStruct()\l+ LockedStruct()\l+ operator=()\l+ operator=()\l+ ~LockedStruct()\l+ lock()\l+ unsafe_value()\l- acquire_mutex()\l- release_mutex()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$struct_locked_struct.html"];
  Node5 -> Node4 [color="grey25",fontsize="10",style="solid",label=" -value" ,arrowhead="odiamond",fontname="Helvetica"];
  Node5 [label="{RobotID\n|+ isValid\l+ lastUpdate\l+ robotID\l|}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$struct_robot_i_d.html",tooltip="Contains data on what ID was selected on the rotary dial. "];
  Node6 -> Node4 [dir="back",color="orange",fontsize="10",style="solid",label=" \< RobotID \>" ,fontname="Helvetica"];
  Node6 [label="{LockedStruct\< T \>\n|- mutex_depth\l- mutex\l|+ LockedStruct()\l+ LockedStruct()\l+ operator=()\l+ LockedStruct()\l+ operator=()\l+ ~LockedStruct()\l+ lock()\l+ unsafe_value()\l- acquire_mutex()\l- release_mutex()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$struct_locked_struct.html",tooltip="A locked-struct abstraction. "];
  Node7 -> Node6 [color="grey25",fontsize="10",style="solid",label=" -value" ,arrowhead="odiamond",fontname="Helvetica"];
  Node7 [label="{T\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node8 -> Node2 [color="grey25",fontsize="10",style="solid",label=" -dial" ,arrowhead="odiamond",fontname="Helvetica"];
  Node8 [label="{RotarySelector\< IOExpander\lDigitalInOut \>\n||+ RotarySelector()\l+ init()\l+ read()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_rotary_selector.html"];
  Node9 -> Node8 [color="grey25",fontsize="10",style="solid",label=" -m_pins" ,arrowhead="odiamond",fontname="Helvetica"];
  Node9 [label="{std::array\< IOExpanderDigital\lInOut, 4 \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node10 -> Node9 [color="grey25",fontsize="10",style="solid",label=" +elements" ,arrowhead="odiamond",fontname="Helvetica"];
  Node10 [label="{IOExpanderDigitalInOut\n|- _pin\l- _mode\l- _state\l|+ IOExpanderDigitalInOut()\l+ init()\l+ pinMode()\l+ write()\l+ read()\l+ operator=()\l+ operator int()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_i_o_expander_digital_in_out.html",tooltip="A DigitalInOut class meant to replicate basic functionality of the mBed DigitalOut and DigitalIn on t..."];
  Node11 -> Node10 [color="grey25",fontsize="10",style="solid",label=" -_mcp23017" ,arrowhead="odiamond",fontname="Helvetica"];
  Node11 [label="{LockedStruct\< MCP23017 \>\n|- mutex_depth\l- mutex\l|+ LockedStruct()\l+ LockedStruct()\l+ LockedStruct()\l+ operator=()\l+ operator=()\l+ ~LockedStruct()\l+ lock()\l+ unsafe_value()\l- acquire_mutex()\l- release_mutex()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$struct_locked_struct.html"];
  Node12 -> Node11 [color="grey25",fontsize="10",style="solid",label=" -value" ,arrowhead="odiamond",fontname="Helvetica"];
  Node12 [label="{MCP23017\n|- _i2cAddress\l- _cachedGPIO\l- _cachedIODIR\l- _cachedGPPU\l- _cachedIPOL\l|+ MCP23017()\l+ init()\l+ reset()\l+ writePin()\l+ writeMask()\l+ readPin()\l+ config()\l+ writeRegister()\l+ readRegister()\l+ pinMode()\land 7 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_m_c_p23017.html",tooltip="Allow access to an I2C-connected MCP23017 16-bit I/O extender chip. "];
  Node13 -> Node12 [color="grey25",fontsize="10",style="solid",label=" -_i2c" ,arrowhead="odiamond",fontname="Helvetica"];
  Node13 [label="{LockedStruct\< I2C \>\n|- value\l- mutex_depth\l- mutex\l|+ LockedStruct()\l+ LockedStruct()\l+ LockedStruct()\l+ operator=()\l+ operator=()\l+ ~LockedStruct()\l+ lock()\l+ unsafe_value()\l- acquire_mutex()\l- release_mutex()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$struct_locked_struct.html"];
  Node6 -> Node13 [dir="back",color="orange",fontsize="10",style="solid",label=" \< I2C \>" ,fontname="Helvetica"];
  Node6 -> Node11 [dir="back",color="orange",fontsize="10",style="solid",label=" \< MCP23017 \>" ,fontname="Helvetica"];
  Node14 -> Node9 [dir="back",color="orange",fontsize="10",style="solid",label=" \< IOExpanderDigitalInOut, 4 \>" ,fontname="Helvetica"];
  Node14 [label="{std::array\< T \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip="STL class. "];
  Node7 -> Node14 [color="grey25",fontsize="10",style="solid",label=" +elements" ,arrowhead="odiamond",fontname="Helvetica"];
  Node15 -> Node8 [dir="back",color="orange",fontsize="10",style="solid",label=" \< IOExpanderDigitalInOut \>" ,fontname="Helvetica"];
  Node15 [label="{RotarySelector\< DIGITAL\l_IN, NUM_PINS \>\n||+ RotarySelector()\l+ init()\l+ read()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_rotary_selector.html",tooltip="This class facilitates reading the value from a rotary selector. "];
  Node16 -> Node15 [color="grey25",fontsize="10",style="solid",label=" -m_pins" ,arrowhead="odiamond",fontname="Helvetica"];
  Node16 [label="{std::array\< DIGITAL\l_IN, NUM_PINS \>\n|+ elements\l|}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node14 -> Node16 [dir="back",color="orange",fontsize="10",style="solid",label=" \< DIGITAL_IN, NUM_PINS \>" ,fontname="Helvetica"];
}
