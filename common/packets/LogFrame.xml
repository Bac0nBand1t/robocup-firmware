<struct typename="LogFrame">
	<struct typename="Vision" include_cpp="Vision.hpp" external_cpp="Packet::Vision" external_python="Packet.Vision" />
	<struct typename="Point2d" include_cpp="Geometry/Point2d.hpp" external_cpp="Geometry::Point2d" external_python="Geometry.Point2d" />
	<struct typename="RadioTx" include_cpp="RadioTx.hpp" external_cpp="Packet::RadioTx" external_python="Packet.RadioTx"/>

    <!-- see Team.h -->
    <enum type="int8" typename="Team" external_cpp="Team" include_cpp="Team.h">
        <constant name="UnknownTeam" value="-1"/>
        <constant name="Yellow" value="0"/>
        <constant name="Blue" value="1"/>
    </enum>

    <!-- Commands for motion -->
    <struct typename="MotionCmd">
        <!--Goal position for the robot-->
        <member type="Point2d" name="goal" />

        <!-- motion generated commanded position of the robot -->
        <member type="Point2d" name="pos" />

        <!-- feedforward velocity of the robot -->
        <member type="Point2d" name="v_ff" />

        <!-- commanded angle of the robot (+- 180 degrees) -->
        <member type="float" name="angle" />

        <!-- The velocity command to the robot in team space -->
        <member type="Point2d" name="vel" />
    </struct>

	<!-- post process robot information -->
	<struct typename="Robot">
		<!-- shell id, used for debug -->
		<member type="uint8" name="shell" />

		<!-- position of the robot -->
		<member type="Point2d" name="pos" />

		<!-- velocity of the robot -->
		<member type="Point2d" name="vel" />

		<!-- angle of the robot (+- 180 degrees) -->
		<member type="float" name="angle" />

		<!-- angular velocity of the robot degrees/timestep -->
		<member type="float" name="angleVel" />

        <!-- MotionCmd Structure -->
        <member type="MotionCmd" name="cmd" />

		<!-- if true, this robot is active for use -->
		<member type="bool" name="valid" value="false" />
		
		<!-- radio tx packet for the robot -->
		<member type="RadioTx::Robot" name="radioTx" />
	</struct>

	<!-- post processed ball information -->
	<struct typename="Ball">
		<member type="Point2d" name="pos" />
		<member type="Point2d" name="vel" />

		<member type="bool" name="valid" value="false" />
	</struct>

	<!-- unprocessed vision, in team space -->
	<array type="Packet::Vision" name="rawVision" />

    <!-- team we are running as -->
    <member type="Team" name="team" />

	<!-- timestamp of the vision packet that clocked the system -->
	<member type="uint64" name="timestamp" />

	<!-- array of robots for the system, index is player id -->
	<array size="5" type="Robot" name="self"/>
	<array size="5" type="Robot" name="opp"/>

	<!-- gameplay ball -->
	<member type="Ball" name="ball" />
</struct>